<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.noerror.Mapper.inventory_mapper">


<!-- 입고창고 + 부자재창고 아이템별 재고수 -->
<select id="ind_item_stock" resultType="int" parameterType="String">
	SELECT SUM(ITEM_QTY) AS TOTAL_QTY
	FROM (
	  SELECT ITEM_QTY FROM WAREHOUSE_INB WHERE ITEM_CODE = #{ITEM_CODE}
	  UNION ALL
	  SELECT ITEM_QTY FROM WAREHOUSE_MATERIAL WHERE ITEM_CODE = #{ITEM_CODE}
	);
</select>

<!--  개별 완제품 재고수  -->
<select id="ind_pd_stock" resultType="kr.co.noerror.DTO.IOSF_DTO">
<!-- 	SELECT  -->
<!-- 		NVL(SUM(CASE WHEN CHANGE_TYPE = '입고' THEN PD_QTY ELSE 0 END), 0) - -->
<!-- 		NVL(SUM(CASE WHEN CHANGE_TYPE = '출고' THEN PD_QTY ELSE 0 END), 0) AS IND_PD_STOCK -->
<!-- 	FROM WAREHOUSE_FINISH -->
<!-- 	WHERE PRODUCT_CODE = #{PRODUCT_CODE} -->
	SELECT 
	  product_code, product_name,
	  SUM(CASE WHEN change_type = '입고' THEN pd_qty ELSE 0 END) -
	  SUM(CASE WHEN change_type = '출고' THEN pd_qty ELSE 0 END) - 
	  SUM(CASE WHEN change_type = '출고완료' THEN pd_qty ELSE 0 END ) AS ind_pd_stock
	FROM PD_STOCK_VIEW
	<where>
		<if test="wh_code != null">
		TRIM(WH_CODE) = #{wh_code}
		</if>
	</where>
	GROUP BY product_code, product_name
	ORDER BY product_code
</select>

<!--  완제품 재고 리스트  -->
<select id="pd_stock_list" resultType="kr.co.noerror.DTO.IOSF_DTO" parameterType="Map">
	SELECT
		PRODUCT_CODE,
  		MAX(WFS_IDX) KEEP (DENSE_RANK FIRST ORDER BY PD_INSERT_DATE DESC) AS wfs_idx,
	  	MAX(WFS_CODE) KEEP (DENSE_RANK FIRST ORDER BY PD_INSERT_DATE DESC) AS wfs_code,
	  	MAX(WH_CODE) KEEP (DENSE_RANK FIRST ORDER BY PD_INSERT_DATE DESC) AS wh_code,
	  	MAX(PD_QTY) KEEP (DENSE_RANK FIRST ORDER BY PD_INSERT_DATE DESC) AS pd_qty,
	  	MAX(CHANGE_TYPE) KEEP (DENSE_RANK FIRST ORDER BY PD_INSERT_DATE DESC) AS change_type,
	  	MAX(EMP_CODE) KEEP (DENSE_RANK FIRST ORDER BY PD_INSERT_DATE DESC) AS emp_code,
	  	MAX(FS_INSERT) KEEP (DENSE_RANK FIRST ORDER BY PD_INSERT_DATE DESC) AS fs_insert,
	  	MAX(PIDX) KEEP (DENSE_RANK FIRST ORDER BY PD_INSERT_DATE DESC) AS pidx,
	  	MAX(PRODUCT_NAME) KEEP (DENSE_RANK FIRST ORDER BY PD_INSERT_DATE DESC) AS product_name,
	  	MAX(PRODUCT_CLASS1) KEEP (DENSE_RANK FIRST ORDER BY PD_INSERT_DATE DESC) AS product_class1,
	  	MAX(PRODUCT_CLASS2) KEEP (DENSE_RANK FIRST ORDER BY PD_INSERT_DATE DESC) AS product_class2,
	  	MAX(PD_FILE_RENM) KEEP (DENSE_RANK FIRST ORDER BY PD_INSERT_DATE DESC) AS pd_file_renm,
	  	MAX(PD_API_FNM) KEEP (DENSE_RANK FIRST ORDER BY PD_INSERT_DATE DESC) AS pd_api_fnm,
	  	MAX(PD_INSERT_DATE) KEEP (DENSE_RANK FIRST ORDER BY PD_INSERT_DATE DESC) AS pd_insert_date
	FROM PD_STOCK_VIEW
	GROUP BY PRODUCT_CODE
<!-- 	OFFSET #{start} ROWS FETCH NEXT #{count} ROWS ONLY -->
</select>


</mapper>