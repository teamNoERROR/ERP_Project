<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.noerror.Mapper.plan_mapper">

<!-- 검색조건과 페이징 처리를 반영한 데이터 select -->
<select id="prdplan_paged_list" resultType="kr.co.noerror.DTO.prdplan_res_DTO" parameterType="Map">
SELECT * FROM (
    SELECT inner_result.*, ROWNUM rnum
    FROM (
        SELECT pln.*, ord.due_date, cmp.company_name, emp.ename
        FROM production_plan pln
        LEFT JOIN order_request ord ON pln.order_code = ord.order_code
        LEFT JOIN client_comp cmp ON pln.company_code = cmp.company_code
        JOIN employee2 emp ON pln.ecode = emp.ecode
        WHERE 1=1
		<if test="search_word != null and search_word != ''">
		  AND (
		      cmp.company_name LIKE '%' || #{search_word} || '%' OR
		      pla.plan_code LIKE '%' || #{search_word} || '%'
		  )
		</if>
	    <if test="statuses != null and statuses.size() > 0">
	        AND pln.plan_status IN
	        <foreach item="status" index="index" collection="statuses" open="(" separator="," close=")">
	            #{status}
	        </foreach>
	    </if>
        ORDER BY pln.pidx DESC
    ) inner_result
    WHERE ROWNUM &lt; #{end}
)
WHERE rnum &gt; #{start}
</select>

<!-- 검색조건과 페이징 처리를 반영한 데이터 갯수 -->
<select id="prdplan_search_count" resultType="int" parameterType="kr.co.noerror.DTO.search_condition_DTO">
SELECT COUNT(*) AS total
	FROM production_plan pln
	JOIN order_request ord ON pln.order_code = ord.order_code
	JOIN client_comp cmp ON pln.company_code = cmp.company_code
	JOIN employee2 emp ON pln.ecode = emp.ecode
WHERE 1=1
	<if test="search_word != null and search_word != ''">
	  AND (
	      
	      cmp.company_name LIKE '%' || #{search_word} || '%' OR
	      pla.plan_code  LIKE '%' || #{search_word} || '%'
	  )
	</if>
    <if test="statuses != null and statuses.size() > 0">
        AND pln.plan_status IN
        <foreach item="status" index="index" collection="statuses" open="(" separator="," close=")">
            #{status}
        </foreach>
    </if>
</select>

<select id="bom_items" resultType="kr.co.noerror.DTO.bom_DTO" parameterType="String">
  SELECT 
    bom.bom_code, 
    pdt.product_name,
    itm.item_code, 
    itm.item_name, 
    itm.item_spec, 
    itm.item_unit, 
    itm.item_cost, 
    bom.bom_qty 
  FROM bom bom
  JOIN items itm ON bom.item_code = itm.item_code
  JOIN products pdt ON bom.product_code = pdt.product_code
  WHERE bom.bom_code = #{bom_code}
</select>

<!-- 주문 목록 출력 -->  
<select id="orders_modal" resultType="kr.co.noerror.DTO.ordreq_res_DTO">
SELECT
    ord.order_code,
    ord.product_code,
    pdt.product_name,
    ord.product_qty,
    pdt.product_spec,
    pdt.product_unit,
    orh.company_code,
    cmp.company_name,
    orh.due_date,
    bom.bom_code
FROM order_req_detail ord
JOIN order_request orh ON ord.order_code = orh.order_code
JOIN products pdt ON ord.product_code = pdt.product_code
JOIN client_comp cmp ON orh.company_code = cmp.company_code
JOIN bom bom ON pdt.product_code = bom.product_code
</select>

<!-- 사원 목록 출력 -->
<select id="emps_modal" resultType="kr.co.noerror.DTO.employee_DTO">
SELECT * FROM employee ORDER BY eidx desc
</select>

<!-- plan_code 중복체크 -->
<select id="plan_code_check" parameterType="String" resultType="int">
 SELECT count(*) FROM production_plan WHERE plan_code = #{plan_code}
</select>

<!-- 생산계획 저장 -->
<!-- 헤더 테이블 -->
<insert id="prdplan_insert" parameterType="kr.co.noerror.DTO.prdplan_DTO">
  INSERT INTO production_plan (
    pidx,
    plan_code,
    order_code,
    priority,
    start_date,
    end_date,
    company_code,
    ecode,
    plan_status,
    mrp_status,
    memo,
    plan_date,
    modify_date
  ) VALUES (
    production_plan_no.NEXTVAL, 
    #{plan_code},
    #{order_code, jdbcType=VARCHAR},
    #{priority},
    #{start_date},
    #{end_date},
    #{company_code, jdbcType=VARCHAR},
    #{ecode},
    #{plan_status},
    #{mrp_status},
    #{memo}, 
    SYSDATE,
    SYSDATE 
  ) 
</insert>

<!-- 상세 테이블 -->
<insert id="prdplan_detail_insert" parameterType="kr.co.noerror.DTO.prdplan_detail_DTO">
  INSERT INTO production_plan_detail (
    pidx,
    plan_code,
    product_code,
    bom_code,
    product_qty
  ) VALUES (
    production_plan_detail_no.NEXTVAL,
    #{plan_code},
    #{product_code},
    #{bom_code},
    #{product_qty}
  )
</insert>

<!-- 생산계획 상세정보 조회 -->
<select id="prdplan_detail" resultType="kr.co.noerror.DTO.prdplan_res_DTO" parameterType="String">
SELECT
    pld.pidx, 
    pld.plan_code, 
    pld.product_code, 
    prd.product_name,
    prd.product_spec,
    prd.product_unit, 
    pld.product_qty, 
    pln.priority,
    orh.due_date, 
    prd.product_cost,
    prd.product_class1,
    prd.product_class2,
    pln.order_code,
    pln.plan_status, 
    pln.start_date,
    pln.end_date,
    pln.memo,
    cmp.company_name, 
    cmp.biz_num,
    cmp.ceo_name,
    cmp.manager_name,
    cmp.mng_phone,
    cmp.com_addr1,
    cmp.com_addr2,
    emp.ename
FROM production_plan_detail pld
JOIN production_plan pln ON pld.plan_code = pln.plan_code
LEFT JOIN order_request orh ON pln.order_code = orh.order_code
LEFT JOIN order_req_detail ord 
  ON pln.order_code = ord.order_code 
 AND pld.product_code = ord.product_code
JOIN products prd ON pld.product_code = prd.product_code
LEFT JOIN client_comp cmp ON pln.company_code = cmp.company_code
LEFT JOIN employee2 emp ON pln.ecode = emp.ecode
WHERE pld.plan_code = #{plan_code}
</select>

<!-- 생산계획정보 수정 -->
<update id="prdplan_update" parameterType="kr.co.noerror.DTO.prdplan_DTO">
UPDATE production_plan
SET
	priority = #{priority},
	start_date = #{start_date},
	end_date = #{end_date},
	ecode = #{ecode},
	memo = #{memo},
	modify_date = SYSDATE
WHERE plan_code = #{plan_code}
</update>

<update id="prdplan_detail_update" parameterType="kr.co.noerror.DTO.prdplan_detail_DTO">
UPDATE production_plan_detail
SET
	product_qty = #{product_qty}
WHERE plan_code = #{plan_code}
  AND product_code = #{product_code} 
</update>

<!-- 생산계획상태 업데이트 -->
<update id="plan_status_update" parameterType="map">
UPDATE production_plan
SET plan_status = #{plan_status}
WHERE plan_code = #{plan_code}
</update>



<!--  생산완료 처리시 부자재 창고 재고 차감  -->
<!-- plancode에 해당하는 mrp정보 가져옴  -->
<select id="select_mrp_result" resultType="kr.co.noerror.DTO.mrp_result_DTO" parameterType="String">
	<!-- 
	SELECT ITEM_CODE, REQUIRED_QTY
    FROM MRP_RESULT_DETAIL2 WHERE PLAN_CODE = #{PLAN_CODE}
    -->
    SELECT ITEM_CODE, sum(REQUIRED_QTY) as REQUIRED_QTY FROM MRP_RESULT_DETAIL2 where PLAN_CODE = #{PLAN_CODE} GROUP BY ITEM_CODE
</select>

<!-- 부자재 출고되는 제품의 창고 정보  -->
<select id="outItm_info2" resultType="kr.co.noerror.DTO.IOSF_DTO" parameterType="String">
	SELECT * FROM WAREHOUSE_MATERIAL WHERE ITEM_CODE = #{item_code} AND CHANGE_TYPE = '입고'  AND (MOVE_TYPE IS NULL) 
	ORDER BY INV_LOT
</select>

 <select id="outItm_info" resultType="Integer" parameterType="String">
<!-- SELECT  -->
<!-- (SELECT SUM(ITEM_QTY) FROM WAREHOUSE_MATERIAL WHERE ITEM_CODE = #{item_code} AND CHANGE_TYPE = '입고' ) as indata, -->
<!-- (SELECT SUM(ITEM_QTY) FROM WAREHOUSE_MATERIAL WHERE ITEM_CODE = #{item_code} AND CHANGE_TYPE = '출고완료') as outdata  -->
<!-- from WAREHOUSE_MATERIAL -->
<!-- WHERE ITEM_CODE = #{item_code} GROUP BY ITEM_CODE -->

SELECT 
    SUM(
        CASE 
            WHEN CHANGE_TYPE = '입고' THEN ITEM_QTY 
            WHEN CHANGE_TYPE = '출고' THEN -ITEM_QTY
            WHEN CHANGE_TYPE = '출고완료' THEN -ITEM_QTY
            ELSE 0
        END
    ) AS outdata
FROM WAREHOUSE_MATERIAL
WHERE ITEM_CODE = #{item_code}
GROUP BY ITEM_CODE
 </select>
 
<!--  부자재 출고처리 창고리스트에 반영 -->
<insert id="mt_warehouse_out" parameterType="Map">
	INSERT INTO WAREHOUSE_MATERIAL (
	    WMT_IDX,
	    WMT_CODE,
	    WH_CODE,
	    INBOUND_CODE,
	    IND_PCH_CD,
	    ITEM_CODE,
	    ITEM_QTY,
	    CHANGE_TYPE,
	    EMPLOYEE_CODE,
	    MT_INSERT_DATE,
	    MT_MODIFY_DATE,
	    MOVE_TYPE,
	    INV_LOT
	) VALUES (
	    MT_WAREHOUSE_NO.NEXTVAL,
	    'WMT-' || LPAD(WIN_CODE_SEQ.NEXTVAL, 5, '0'),
	    #{wh_code},
	    '-',
	    #{ind_pch_code},
	    #{item_code},
	    #{item_qty},
	   	'출고완료',
	    #{employee_code},
	    SYSTIMESTAMP,
	    NULL,
	    NULL,
	    #{inv_lot}
	)
</insert>

</mapper>